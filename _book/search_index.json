[["index.html", "Shiny App Workflows Preface", " Shiny App Workflows Braeden Klaver 2025-03-12 Preface This document aims to provide a walkthrough on how to work within a shiny app workflow that leverages git/gitlab, package structure, shiny, and bslib. "],["git.html", "Chapter 1 Git 1.1 Basic git workflow 1.2 Setting up Github or Gitlab projects 1.3 Collaborative git workflow 1.4 Using Git at the BCCDC 1.5 Git Commands Summary 1.6 Additional Resources", " Chapter 1 Git Git is a free and open-source version control system. When used regularly and as intended, developers will have a full history of their project within a local repository. In addition to a historical log of changes to project files, git allows for project branching to support users to test/develop new code, while maintaining the master version for easy reversion. When users are ready to implement their new branch into the main codebase git can be used for merging files, whereby it tracks changes and ensures there are no conflicts between the main version and the new version. Beyond local usage, git is also supported by web-based repositories such as Github and Gitlab, where projects can be pushed, pulled, and cloned. These sites allow for easy collaboration with other developers and provide a number of user-friendly features that make working with git easier. NOTE In RStudio, git is accessed in the terminal or in the top right under the Git tab when Git has been initialized for the project. 1.1 Basic git workflow Step 1) Create a project. Step 2) Initialize git. git init Step 3) Check your project file status git status Step 4) Add a file to the local repo git add filename.R Step 5) Commit your change with a message git commit -m \"Add filename.R\" Step 6) Create a branch to test/develop code git branch test_branch Step 7) Go into that branch git checkout test_branch Step 8) Modify your code and repeat steps 3 and 4 Step 9) When ready merge branches git merge master test_branch TIP Branching is useful when you have a stable codebase that you do not want to break. You can create a branch to do development work and test new features until its ready for integration with the stable codebase. 1.2 Setting up Github or Gitlab projects Ensure your profile is set up git config --global user.name \"Braeden Klaver\" git config --global user.email \"braeden.klaver@bccdc.ca\" 1.2.1 Pre-existing project on Github or Gitlab Step 1) In your terminal navigate to the folder you want to clone the project to cd \"U:/myprojects\" Step 2) Clone the project into that folder and give the project a name git clone http://lvmgenodh01.phsabc.ehcnet.ca/braeden.klaver/test.git myproject 1.2.2 Personal project without git Step 1) Open your R project Step 2) Initialize git git init Step 3) Create a project on Gitlab or Github Step 4) Connect your R project to that repository (should be the URL) git remote add origin http://lvmgenodh01.phsabc.ehcnet.ca/braeden.klaver/test.git Step 5) Add and commit your files git add . git commit -m \"Initial commit\" Step 6) Push your project to that repository git push 1.2.3 Personal project with Git Step 1) Open your R project Step 2) Connect your R project to that repository (should be the URL) git remote add origin http://lvmgenodh01.phsabc.ehcnet.ca/braeden.klaver/test.git Step 3) Push your project to that repository git push 1.3 Collaborative git workflow In addition to the basic workflow, when working with a web-based repository like Github or Gitlab there are additional steps you will need to take: Step 1) Pulling changes from the repository - your coworkers may have made changes! git pull Step 2) Follow the basic workflow (Section 1.1) Step 3) Pushing your changes to the repository - your coworkers will want to be up to date! git push 1.4 Using Git at the BCCDC 1.4.1 Git on Citrix Git is installed on citrix already, it can be initialized as described above or you can click a check box to create a git repository when creating a new project. TIP If you have a local R installation and youd like to work there but do not have git installed locally you can still leverage citrix R to use git for your projects. 1.4.2 Github Because Github is an external web-based repository there are some considerations for its use at the BCCDC. Currently, there are no formal guidelines on using it, for this reason using it for BCCDC-specific projects should be avoided. 1.4.3 Gitlab The BCCDC has a private Gitlab repository, which can be used for regular BCCDC projects within the scope set out in the guiding document. NOTE You can request access to Gitlab via this form. 1.4.4 Suggested project workflow Working with git tracked projects requires you to have your own local repository. For this reason, it is recommended to keep this repository in your U:/ drive. In addition, we would recommend having another local repository in the O:/ drive, which would be dedicated to running pipelines or deploying apps and not for development work. WARNING Some project data may not be permitted on your U:/ drive, therefore ensure your code is loading that data from an appropriate location. 1.5 Git Commands Summary Command Description git init Initialize git for the directory git status Check the status of files in the directory (eg. are they being tracked, have they been modified) git add Stage a file for commit git rm Remove a file staged for commit git commit Commit your changes git branch Create a branch for development work git checkout Checkout a branch to work within git merge Merge two branches together git pull Pull the most up-to-date repository from a remote (ie. Github or Gitlab) git push Push your changes to a remote repository (ie. Github or Gitlab) 1.6 Additional Resources Mike Kuos Git Tutorial Git Playground "],["package-structure.html", "Chapter 2 Package Structure 2.1 Package Structure 2.2 Loading devtools and usethis 2.3 load_all function 2.4 The DESCRIPTION file 2.5 Documenting your functions 2.6 The NAMESPACE 2.7 The README file 2.8 Organizing your scripts 2.9 Using data in a package 2.10 Additional Resources", " Chapter 2 Package Structure In R, the fundamental unit of shareable code is the package. A package bundles together code, data, documentation, and tests, and is easy to share with others. But packages are useful even if you never share your code. As Hilary Parker says in her introduction to packages: Seriously, it doesnt have to be about sharing your code (although that is an added benefit!). It is about saving yourself time. Organising code in a package makes your life easier because packages come with conventions. For example, you put R code in R/, you put tests in tests/ and you put data in data/. These conventions are helpful because: They save time  you dont need to think about the best way to organise a project, you can just follow a template. Standardised conventions lead to standardised tools  if you buy into Rs package conventions, you get many tools for free. 2.1 Package Structure In an R package or R project structured as a package the typical files and folders will be (locally, you can consult your Files pane): path type description .Rbuildignore file Lists files that we need to have around but that should not be included when building the R package from source. .gitignore file Tells Git to ignore some standard, behind-the-scenes files created by R and RStudio. DESCRIPTION file Provides metadata about your package. NAMESPACE file Declares the functions your package exports for external use and the external functions your package imports from other packages. R/ folder the business end of your package. It will soon contain .R files with function definitions. 2.2 Loading devtools and usethis The devtools package is fundamental for developing packages, it comes with a suite of incredibly powerful functions. In addition, it comes with the required package usethis, which compliments the devtools package with another suite of functions required to properly build packages. library(devtools) 2.3 load_all function In a package or project structured as a package you are typically making functions that are stored in the R/ folder. In a standard project you may be familiar with the use of source(\"R/myfunction.R\") to load or run a script. However, devtools allows us to easily run/load all of our project contents with one simple function call: devtools::load_all() This does a few main things: Loads/runs your scripts located in the R/ folder Loads data stored in your data folder Loads other package objects Loads package dependencies listed in the DESCRIPTION file NOTE One main difference is that these functions and data that have been loaded will not appear in the environment, even though they are available. This is similar to when we load a package, such as library(tidyverse), we are now able to use functions such as mutate even though they dont appear in our environment. 2.4 The DESCRIPTION file The DESCRIPTION file provides metadata for your package. Some key pieces of this metadata include the description of the project and the dependencies. If your project doesnt have a DESCRIPTION file you can easily add one using usethis: usethis::use_description() You can manually edit this file or alternatively add certain elements using usethis. For example adding dependencies: usethis::use_package(&#39;dplyr&#39;) NOTE After creating a DESCRIPTION file in your project you will automatically enter package development mode. Read more! 2.5 Documenting your functions At some point we have all used the help functions in R by easily calling something like ?mutate. This requires special documentation which is stored in path such as man/mutate within the package. To do this for ourselves we have to use something called roxygen2, which helps create these handy help windows. To do this with your functions you can open your function script, place the cursor somewhere within the function and then do Code &gt; Insert roxygen skeleton, which will create a basic skeleton to fill out such as this: #&#39; Split a string #&#39; #&#39; @param x A character vector with one element. #&#39; @param split What to split on. #&#39; #&#39; @return A character vector. #&#39; @export #&#39; #&#39; @examples #&#39; x &lt;- &quot;alfa,bravo,charlie,delta&quot; #&#39; strsplit1(x, split = &quot;,&quot;) strsplit1 &lt;- function(x, split) { strsplit(x, split = split)[[1]] } Now, one more step is needed. We must use devtools to automatically create that man/function and update our NAMESPACE file like so: devtools::document() Read more! 2.6 The NAMESPACE The NAMESPACE file is an automatically generated and maintaind file by R, this should not be manually modified. It is filled out depending on the roxygen2 comments left in your scripts and is updated, as described above, by using devtools::document(). It informs the package what contents should be exported when building the package, as well as what needs to be imported (package dependencies) for the package to run. Read more! 2.7 The README file The README file is a very useful document that can help provide context, general information, and usage insight to users. In addition, when knitted, README files are formatted to appear as nice markdown documents in Github and Gitlab. To get a README file started in a project all that you need to do is: usethis::use_readme_rmd() NOTE Remember, you have to knit your README in order to produce a .md file version of it, which will be directly used in places like Github or Gitlab. 2.8 Organizing your scripts The file name should be meaningful and convey which functions are defined within. While youre free to arrange functions into files as you wish, the two extremes are bad: dont put all functions into one file and dont put each function into its own separate file. Organizing.principle Comments One function Defines exactly one function, thats not particulary large, but doesnt fit naturally into any other .R file Main function plus helpers Defines the user-facing function, a method, and private helpers Family of functions Defines a family of functions, all documented together in a big help topic, plus private helpers TIP Another file you often see in the wild is R/utils.R. This is a common place to define small utilities that are used inside multiple package functions. Since they serve as helpers to multiple functions, placing them in R/utils.R makes them easier to re-discover when you return to your package after a long break. 2.9 Using data in a package Traditionally, data in a package is stored in the data/ folder. The data there will be saved in a specific data form that will make it available when you run devtools::load_all(). To store data within a package like this you need to run: usethis::use_data(df) TIP Because you need to actively tell the project to update the dataset in the data/ folder using the above function call, it is not recommended to use this for datasets that get updated regularly. 2.10 Additional Resources R Package Manual "],["shiny.html", "Chapter 3 Shiny 3.1 Packaging a Shiny App", " Chapter 3 Shiny 3.1 Packaging a Shiny App "],["bslib.html", "Chapter 4 bslib 4.1 ", " Chapter 4 bslib 4.1 . "],["modularization.html", "Chapter 5 Modularization 5.1 ", " Chapter 5 Modularization 5.1 . "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
